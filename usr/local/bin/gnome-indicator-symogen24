#!/usr/bin/python3
import os
import requests
import gi

gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')


from gi.repository import Gtk as gtk, AppIndicator3 as appindicator, GLib
from configparser import ConfigParser

IP = None
INTERVAL = 1000

def receive():
  try:
    r = requests.get('http://' + IP + '/status/powerflow', 
                 headers={'Accept': 'application/json'}, timeout=5)
  except:
    return None
  return r.json()

def menu():
  menu = gtk.Menu()

  currentIp = gtk.MenuItem(label='IP: ' + ("No IP given" if IP == None else IP))
  currentIp.connect('activate', openSymo)
  menu.append(currentIp)

  command_one = gtk.MenuItem(label='Edit Config')
  command_one.connect('activate', editConfig)
  menu.append(command_one)
  
  exittray = gtk.MenuItem(label='Exit Tray')
  exittray.connect('activate', quit)
  menu.append(exittray)
  
  menu.show_all()
  return menu

def editConfig(_):
  os.system("gedit $HOME/.config/gnome-indicator.ini")
  reloadIndicator()

def openSymo(_):
  os.system("xdg-open http://" + IP)

def quit(_):
  gtk.main_quit()

def label(indicator, c = None):
  if c != None:
    indicator.set_label(c, "")
  else:
    d = receive()
    if d != None:
      indicator.set_label("{:.2f} kWh - {:.2f} kWh - {:.1f}%".format(d["site"]["P_PV"] / 1000, d["site"]["P_Load"] / 1000 * -1, d["inverters"][0]["SOC"]), "")
      if d["site"]["P_PV"] > d["site"]["P_Load"] * -1:
        indicator.set_icon("weather-clear")
      else:
        indicator.set_icon("weather-overcast")
      GLib.timeout_add(INTERVAL, label, indicator)
    else:
      indicator.set_label("Invalid IP!", "")
      GLib.timeout_add(INTERVAL, label, indicator)

def reloadIndicator():
  if readConfig() == False:
    label(indicator, "NO IP!")
  else:
    label(indicator)
  indicator.set_menu(menu())

def readConfig():
  global IP,INTERVAL
  config = ConfigParser()
  config.read(os.environ["HOME"] + '/.config/gnome-indicator.ini')
  try:
    IP = config.get("symogen24","SYMO_IP")
    INTERVAL = config.getint("symogen24", "INTERVAL", fallback=1000)
    if INTERVAL <= 50:
      INTERVAL = 1000
    print("Read", IP, INTERVAL)
  except:
    return False

indicator = appindicator.Indicator.new("customtray", "weather-overcast", appindicator.IndicatorCategory.APPLICATION_STATUS)
indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
reloadIndicator()
gtk.main()
